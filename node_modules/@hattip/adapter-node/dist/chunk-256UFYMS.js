import {
  rawBodySymbol
} from "./chunk-CDXJFGTO.js";

// src/response.ts
import { Readable } from "node:stream";
var deno = typeof Deno !== "undefined";
if (deno) {
  const oldSet = Headers.prototype.set;
  Headers.prototype.set = function set(key, value) {
    if (Array.isArray(value)) {
      this.delete(key);
      value.forEach((v) => this.append(key, v));
    } else {
      oldSet.call(this, key, value);
    }
  };
}
async function sendResponse(req, res, fetchResponse) {
  if (fetchResponse[rawBodySymbol]) {
    writeHead(fetchResponse, res);
    res.end(fetchResponse[rawBodySymbol]);
    return;
  }
  const { body: fetchBody } = fetchResponse;
  let body = null;
  if (!deno && fetchBody instanceof Readable) {
    body = fetchBody;
  } else if (fetchBody instanceof ReadableStream) {
    if (!deno && Readable.fromWeb) {
      body = Readable.fromWeb(fetchBody);
    } else {
      const reader = fetchBody.getReader();
      body = new Readable({
        async read() {
          const { done, value } = await reader.read();
          this.push(done ? null : value);
        }
      });
    }
  } else if (fetchBody) {
    body = Readable.from(fetchBody);
  }
  writeHead(fetchResponse, res);
  if (body) {
    body.pipe(res);
    await new Promise((resolve, reject) => {
      body.once("error", reject);
      res.once("finish", resolve);
      res.once("error", () => {
        if (!res.writableEnded) {
          body.destroy();
        }
        reject();
      });
      req.once("close", () => {
        if (!res.writableEnded) {
          body.destroy();
          resolve();
        }
      });
    });
  } else {
    res.setHeader("content-length", "0");
    res.end();
  }
}
function writeHead(fetchResponse, nodeResponse) {
  nodeResponse.statusCode = fetchResponse.status;
  if (fetchResponse.statusText) {
    nodeResponse.statusMessage = fetchResponse.statusText;
  }
  const uniqueHeaderNames = new Set(fetchResponse.headers.keys());
  for (const key of uniqueHeaderNames) {
    if (key === "set-cookie") {
      const setCookie = fetchResponse.headers.getSetCookie();
      nodeResponse.setHeader("set-cookie", setCookie);
    } else {
      nodeResponse.setHeader(key, fetchResponse.headers.get(key));
    }
  }
}

export {
  sendResponse
};
